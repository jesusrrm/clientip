plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.5'
	id 'io.spring.dependency-management' version '1.1.3'
	id 'org.graalvm.buildtools.native' version '0.9.27'

}


group = 'com.hvacguardian'
version = '0.0.1'

def gitCommitHash = 'git rev-parse --short HEAD'.execute().text.trim()
def username = project.findProperty("gcrUser") ?: System.getenv("GCR_USER")
def password = project.findProperty("gcrToken") ?: System.getenv("GCR_TOKEN")
def dockerImageVersion = "${project.version}-${gitCommitHash}"
def dockerRegistryUrl = 'ghcr.io'
def dockerImageName = "${username}/clientip"
def dockerImageTag = "${dockerRegistryUrl}/${dockerImageName}:${dockerImageVersion}"


java {
	sourceCompatibility = '21'
}

// application {
//     mainClassName = 'com.hvacguardian.clientip.ClientipApplication'
// }

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	compileOnly group: 'javax.servlet', name: 'javax.servlet-api', version: '3.0.1'
}

tasks.named('bootBuildImage') {
	builder = 'paketobuildpacks/builder-jammy-tiny:latest'
	imageName= dockerImageTag
}

// task pushToGitHubRegistry(type: DockerPushImage) {
//     dependsOn tasks.named('bootBuildImage')

//     registryCredentials {
//         // Set up your GitHub Container Registry credentials here
//         username = project.findProperty("gcrUser") ?: System.getenv("GCR_USER")
//         password = project.findProperty("gcrToken") ?: System.getenv("GCR_TOKEN")
//     }

//     images.add("ghcr.io/jesusrrm/${project.name}:${project.version}")
// }

tasks.named('test') {
	useJUnitPlatform()
}

jar {
    // Set the manifest attributes for the JAR file
    manifest {
        attributes(
            'Main-Class': 'com.hvacguardian.clientip.ClientipApplication'
        )
    }
}

// task buildDockerImage(type: Exec) {
//     commandLine 'docker', 'build', '-t', dockerImageTag, '.'
// }

task loginToDockerRegistry {
    doLast {
        def loginCommand = 'docker login -u ${username} -p ${password} ${dockerRegistryUrl}'
        loginCommand.execute()
    }
}

task pushDockerImage(type: Exec, dependsOn: bootBuildImage) {
	dependsOn tasks.named('loginToDockerRegistry')
    commandLine 'docker', 'push', dockerImageTag
	commandLine 'docker', 'push', '${dockerRegistryUrl}/${dockerImageName}:latest'
}